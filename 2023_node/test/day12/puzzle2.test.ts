import { describe, test, expect } from '@jest/globals';
import { getAbsPath } from '../utils';
import { Puzzle2 } from '../../src/day12/puzzle2';

const sampleBInputFile = getAbsPath(__dirname, 'input2.txt');

const sampleBRecords = [
  { springs: '???.###????.###????.###????.###????.###', groups: [1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3] },
  { springs: '.??..??...?##.?.??..??...?##.?.??..??...?##.?.??..??...?##.?.??..??...?##.', groups: [1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3] },
  { springs: '?#?#?#?#?#?#?#???#?#?#?#?#?#?#???#?#?#?#?#?#?#???#?#?#?#?#?#?#???#?#?#?#?#?#?#?', groups: [1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6, 1, 3, 1, 6] },
  { springs: '????.#...#...?????.#...#...?????.#...#...?????.#...#...?????.#...#...', groups: [4, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1] },
  { springs: '????.######..#####.?????.######..#####.?????.######..#####.?????.######..#####.?????.######..#####.', groups: [1, 6, 5, 1, 6, 5, 1, 6, 5, 1, 6, 5, 1, 6, 5] },
  { springs: '?###??????????###??????????###??????????###??????????###????????', groups: [3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1] },
];

describe('Parsing the input', () => {

  test('Should identify springs and groups', () => {
    const puzzle2 = new Puzzle2(sampleBInputFile);
    puzzle2.parseRecords();
    puzzle2.unfoldRecords();

    expect(puzzle2.records).toBeInstanceOf(Array);
    expect(puzzle2.records).toHaveLength(6);
    for (let r: number = 0; r < sampleBRecords.length; r++) {
      expect(puzzle2.records[r]).toEqual(expect.objectContaining({
        springs: sampleBRecords[r].springs,
        groups: expect.arrayContaining(sampleBRecords[r].groups),
      }));
    }
  });
});
